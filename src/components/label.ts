// Copyright 2021 Im-Beast. All rights reserved. MIT license.
import { drawText } from "../canvas.ts";
import {
  createComponent,
  ExtendedComponent,
  getCurrentStyler,
} from "../tui_component.ts";
import { TextAlign, TuiObject } from "../types.ts";
import { getStaticValue, textWidth } from "../util.ts";
import { CreateBoxOptions } from "./box.ts";

interface LabelExtension {
  value: {
    /** Value of the label */
    text: string;
    /**
     * Position of the label
     * Requires `label` property to be set.
     */
    align: TextAlign;
  };
}

/** Not interactive label (text) component */
export type LabelComponent = ExtendedComponent<"label", LabelExtension>;

export type CreateLabelOptions = CreateBoxOptions & LabelExtension;

/**
 * Create LabelComponent
 *
 * It is not interactive by default
 *
 * It can be automatically generated by some of the components by settings `label` property
 * @param parent - parent of the created box, either Tui instance or other component
 * @param options
 * @example
 * ```ts
 * const tui = createTui(...);
 * ...
 * createLabel(tui, {
 *  rectangle: {
 *     column: 3,
 *     row: 3,
 *     width: 11,
 *     height: 1,
 *   },
 *   text: "Hello here",
 *   textAlign: {
 *     vertical: "top",
 *     horizontal: "center",
 *   },
 * });
 * ```
 */
export function createLabel(
  parent: TuiObject,
  options: CreateLabelOptions,
): LabelComponent {
  let drawers: (() => void)[];

  const lastData = {
    text: "",
    align: "",
    rectangle: JSON.stringify(options.rectangle),
  };

  const label: LabelComponent = createComponent(parent, {
    name: "label",
    interactive: false,
    ...options,
    draw() {
      const { rectangle, value: { text, align } } = label;

      if (
        text !== lastData.text ||
        JSON.stringify(align) !== JSON.stringify(lastData.align) ||
        JSON.stringify(rectangle) !== JSON.stringify(lastData.rectangle)
      ) {
        updateDrawFuncs(text);
        lastData.text = text;
        lastData.align = JSON.stringify(align);
        lastData.rectangle = JSON.stringify(rectangle);
      }

      for (const draw of drawers) {
        draw();
      }
    },
  }, {
    value: options.value,
  });

  const updateDrawFuncs = (text: string) => {
    drawers = [];

    const { column, row, width, height } = getStaticValue(label.rectangle);

    const lines = text.split("\n");
    const { align } = label.value;

    for (let [i, line] of lines.entries()) {
      let tw = textWidth(line);
      while (tw > width) {
        line = line.slice(0, -1);
        tw = textWidth(line);
      }

      let c = column;
      let r = row;

      switch (align.horizontal) {
        case "center":
          c = Math.floor(column + (width / 2) - (tw / 2));
          break;
        case "right":
          r = column + width;
          break;
      }

      switch (align.vertical) {
        case "center":
          r = Math.floor(row + height / 2 - lines.length / 2);
          break;
        case "bottom":
          r = row + height;
          break;
      }

      drawers.push(() =>
        drawText(label.tui.canvas, {
          column: c,
          row: r + i,
          text: line,
          styler: getCurrentStyler(label),
        })
      );
    }
  };

  return label;
}
